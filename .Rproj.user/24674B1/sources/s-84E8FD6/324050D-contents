context("Test GenCandidates")

test_that("Test of the example from wikipedia", {
  ##### TEST: AprioriGen #####
  # In this test I will use the example from wikipedia #
  # Testing set-up based on example from wikipedia #
  # This does represent the example candidate set from wikipedia "https://de.wikipedia.org/wiki/Apriori-Algorithmus" in a incident matrix #
  testmat <- as(matrix(as.logical(c(1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,0)), nrow = 5, dimnames = list(c('a', 'b', 'c', 'd', 'e'),NULL)), 'ngCMatrix')
  
  # The result should be #
  result_mat <- as(matrix(c(TRUE, TRUE, TRUE, TRUE, FALSE), ncol = 1, dimnames = list(c('a', 'b', 'c', 'd', 'e'),NULL)), 'ngCMatrix')
  expect_equal(result_mat,GenCandidates(testmat))

})

test_that("input itemsets of length 2 output should be empty.", {
  input <- as(matrix(c(TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE),ncol = 3, dimnames = list(c('a', 'b', 'c', 'd'),NULL)), 'ngCMatrix')
  expect_equal(GenCandidates(input), input[,0, drop = FALSE])
})


### TO DO: ###
# ADD A TEST WHERE THERE IS ONLY ONE CANDIDATE, i.e. an input of two vectors with 3 dataset out of 4 #


# here i will test the create of length 2 candidates #


### TESTING ####


# for five elements #
# n <- 5
# L1 <- diag(rep(TRUE, n))
# 
# cols_need <- sum((1:(nrow(L1) - 1)))
# cols_need
# 
# L2 <- matrix(rep(FALSE, nrow(L1) * cols_need), nrow = nrow(L1))
# rownames(L2) <- as.character(1:n)
# cols <- 0:(cols_need - 1) * nrow(L1)
# 
# pos <- c(rep(1:(nrow(L1) - 1), times = (nrow(L1) - 1):1 ) + cols, unlist(lapply(2:nrow(L1), seq, to = nrow(L1))) + cols)
# 
# L2[pos] <- TRUE
# 
# all(combn(as.character(1:n), 2) == apply(L2, 2, function(x){
#   return(rownames(L2)[x])
# }))